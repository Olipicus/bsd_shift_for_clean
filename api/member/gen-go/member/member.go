// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package member

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - _id
//  - LineID
//  - Name
//  - Pic
//  - Message
//  - Day
type Member struct {
  _id string `thrift:"_id,1" db:"_id" json:"_id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Pic string `thrift:"pic,3" db:"pic" json:"pic"`
  Message string `thrift:"message,4" db:"message" json:"message"`
  Day string `thrift:"day,5" db:"day" json:"day"`
  LineID string `thrift:"line_id,6" db:"line_id" json:"line_id"`
}

func NewMember() *Member {
  return &Member{}
}


func (p *Member) Get_id() string {
  return p._id
}

func (p *Member) GetLineID() string {
  return p.LineID
}

func (p *Member) GetName() string {
  return p.Name
}

func (p *Member) GetPic() string {
  return p.Pic
}

func (p *Member) GetMessage() string {
  return p.Message
}

func (p *Member) GetDay() string {
  return p.Day
}
func (p *Member) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Member)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p._id = v
}
  return nil
}

func (p *Member)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LineID = v
}
  return nil
}

func (p *Member)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Member)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pic = v
}
  return nil
}

func (p *Member)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Member)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Day = v
}
  return nil
}

func (p *Member) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Member"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Member) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:_id: ", p), err) }
  if err := oprot.WriteString(string(p._id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T._id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:_id: ", p), err) }
  return err
}

func (p *Member) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Member) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pic", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pic: ", p), err) }
  if err := oprot.WriteString(string(p.Pic)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pic (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pic: ", p), err) }
  return err
}

func (p *Member) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err) }
  return err
}

func (p *Member) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:day: ", p), err) }
  if err := oprot.WriteString(string(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:day: ", p), err) }
  return err
}

func (p *Member) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("line_id", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:line_id: ", p), err) }
  if err := oprot.WriteString(string(p.LineID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.line_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:line_id: ", p), err) }
  return err
}

func (p *Member) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Member(%+v)", *p)
}

// Attributes:
//  - Day
//  - Color
//  - Members
type ResultDay struct {
  Day string `thrift:"day,1" db:"day" json:"day"`
  Color string `thrift:"color,2" db:"color" json:"color"`
  Members []*Member `thrift:"members,3" db:"members" json:"members"`
}

func NewResultDay() *ResultDay {
  return &ResultDay{}
}


func (p *ResultDay) GetDay() string {
  return p.Day
}

func (p *ResultDay) GetColor() string {
  return p.Color
}

func (p *ResultDay) GetMembers() []*Member {
  return p.Members
}
func (p *ResultDay) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultDay)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Day = v
}
  return nil
}

func (p *ResultDay)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Color = v
}
  return nil
}

func (p *ResultDay)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Member, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Member{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Members = append(p.Members, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResultDay) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResultDay"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultDay) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:day: ", p), err) }
  if err := oprot.WriteString(string(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:day: ", p), err) }
  return err
}

func (p *ResultDay) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("color", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:color: ", p), err) }
  if err := oprot.WriteString(string(p.Color)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.color (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:color: ", p), err) }
  return err
}

func (p *ResultDay) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("members", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:members: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:members: ", p), err) }
  return err
}

func (p *ResultDay) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultDay(%+v)", *p)
}

type MemberService interface {
  // Parameters:
  //  - ID
  AssignDay(ctx context.Context, id string) (r []*Member, err error)
  GetResults(ctx context.Context) (r []*ResultDay, err error)
  // Parameters:
  //  - ID
  GetMember(ctx context.Context, id string) (r *Member, err error)
  // Parameters:
  //  - Day
  GetResultByDay(ctx context.Context, day string) (r *ResultDay, err error)
  GetNotAssign(ctx context.Context) (r []*Member, err error)
  // Parameters:
  //  - Member
  AddMember(ctx context.Context, member *Member) (err error)
  // Parameters:
  //  - LineID
  GetMemberByLineID(ctx context.Context, line_id string) (r *Member, err error)
}

type MemberServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewMemberService instead
func NewMemberServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MemberServiceClient {
  return &MemberServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewMemberService instead
func NewMemberServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MemberServiceClient {
  return &MemberServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMemberServiceClient(c thrift.TClient) *MemberServiceClient {
  return &MemberServiceClient{
    c: c,
  }
}

// Parameters:
//  - ID
func (p *MemberServiceClient) AssignDay(ctx context.Context, id string) (r []*Member, err error) {
  var _args1 MemberServiceAssignDayArgs
  _args1.ID = id
  var _result2 MemberServiceAssignDayResult
  if err = p.c.Call(ctx, "assignDay", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

func (p *MemberServiceClient) GetResults(ctx context.Context) (r []*ResultDay, err error) {
  var _args3 MemberServiceGetResultsArgs
  var _result4 MemberServiceGetResultsResult
  if err = p.c.Call(ctx, "getResults", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *MemberServiceClient) GetMember(ctx context.Context, id string) (r *Member, err error) {
  var _args5 MemberServiceGetMemberArgs
  _args5.ID = id
  var _result6 MemberServiceGetMemberResult
  if err = p.c.Call(ctx, "getMember", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Day
func (p *MemberServiceClient) GetResultByDay(ctx context.Context, day string) (r *ResultDay, err error) {
  var _args7 MemberServiceGetResultByDayArgs
  _args7.Day = day
  var _result8 MemberServiceGetResultByDayResult
  if err = p.c.Call(ctx, "getResultByDay", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

func (p *MemberServiceClient) GetNotAssign(ctx context.Context) (r []*Member, err error) {
  var _args9 MemberServiceGetNotAssignArgs
  var _result10 MemberServiceGetNotAssignResult
  if err = p.c.Call(ctx, "getNotAssign", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - Member
func (p *MemberServiceClient) AddMember(ctx context.Context, member *Member) (err error) {
  var _args11 MemberServiceAddMemberArgs
  _args11.Member = member
  var _result12 MemberServiceAddMemberResult
  if err = p.c.Call(ctx, "addMember", &_args11, &_result12); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - LineID
func (p *MemberServiceClient) GetMemberByLineID(ctx context.Context, line_id string) (r *Member, err error) {
  var _args13 MemberServiceGetMemberByLineIDArgs
  _args13.LineID = line_id
  var _result14 MemberServiceGetMemberByLineIDResult
  if err = p.c.Call(ctx, "getMemberByLineID", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

type MemberServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MemberService
}

func (p *MemberServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MemberServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MemberServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMemberServiceProcessor(handler MemberService) *MemberServiceProcessor {

  self15 := &MemberServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self15.processorMap["assignDay"] = &memberServiceProcessorAssignDay{handler:handler}
  self15.processorMap["getResults"] = &memberServiceProcessorGetResults{handler:handler}
  self15.processorMap["getMember"] = &memberServiceProcessorGetMember{handler:handler}
  self15.processorMap["getResultByDay"] = &memberServiceProcessorGetResultByDay{handler:handler}
  self15.processorMap["getNotAssign"] = &memberServiceProcessorGetNotAssign{handler:handler}
  self15.processorMap["addMember"] = &memberServiceProcessorAddMember{handler:handler}
  self15.processorMap["getMemberByLineID"] = &memberServiceProcessorGetMemberByLineID{handler:handler}
return self15
}

func (p *MemberServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x16 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x16.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x16

}

type memberServiceProcessorAssignDay struct {
  handler MemberService
}

func (p *memberServiceProcessorAssignDay) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceAssignDayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("assignDay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceAssignDayResult{}
var retval []*Member
  var err2 error
  if retval, err2 = p.handler.AssignDay(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assignDay: " + err2.Error())
    oprot.WriteMessageBegin("assignDay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("assignDay", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetResults struct {
  handler MemberService
}

func (p *memberServiceProcessorGetResults) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetResultsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetResultsResult{}
var retval []*ResultDay
  var err2 error
  if retval, err2 = p.handler.GetResults(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResults: " + err2.Error())
    oprot.WriteMessageBegin("getResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getResults", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetMember struct {
  handler MemberService
}

func (p *memberServiceProcessorGetMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetMemberArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetMemberResult{}
var retval *Member
  var err2 error
  if retval, err2 = p.handler.GetMember(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMember: " + err2.Error())
    oprot.WriteMessageBegin("getMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMember", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetResultByDay struct {
  handler MemberService
}

func (p *memberServiceProcessorGetResultByDay) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetResultByDayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getResultByDay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetResultByDayResult{}
var retval *ResultDay
  var err2 error
  if retval, err2 = p.handler.GetResultByDay(ctx, args.Day); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResultByDay: " + err2.Error())
    oprot.WriteMessageBegin("getResultByDay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getResultByDay", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetNotAssign struct {
  handler MemberService
}

func (p *memberServiceProcessorGetNotAssign) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetNotAssignArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getNotAssign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetNotAssignResult{}
var retval []*Member
  var err2 error
  if retval, err2 = p.handler.GetNotAssign(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNotAssign: " + err2.Error())
    oprot.WriteMessageBegin("getNotAssign", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getNotAssign", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorAddMember struct {
  handler MemberService
}

func (p *memberServiceProcessorAddMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceAddMemberArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceAddMemberResult{}
  var err2 error
  if err2 = p.handler.AddMember(ctx, args.Member); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addMember: " + err2.Error())
    oprot.WriteMessageBegin("addMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("addMember", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type memberServiceProcessorGetMemberByLineID struct {
  handler MemberService
}

func (p *memberServiceProcessorGetMemberByLineID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MemberServiceGetMemberByLineIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMemberByLineID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MemberServiceGetMemberByLineIDResult{}
var retval *Member
  var err2 error
  if retval, err2 = p.handler.GetMemberByLineID(ctx, args.LineID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMemberByLineID: " + err2.Error())
    oprot.WriteMessageBegin("getMemberByLineID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMemberByLineID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ID
type MemberServiceAssignDayArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceAssignDayArgs() *MemberServiceAssignDayArgs {
  return &MemberServiceAssignDayArgs{}
}


func (p *MemberServiceAssignDayArgs) GetID() string {
  return p.ID
}
func (p *MemberServiceAssignDayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAssignDayArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *MemberServiceAssignDayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("assignDay_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAssignDayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MemberServiceAssignDayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAssignDayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceAssignDayResult struct {
  Success []*Member `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceAssignDayResult() *MemberServiceAssignDayResult {
  return &MemberServiceAssignDayResult{}
}

var MemberServiceAssignDayResult_Success_DEFAULT []*Member

func (p *MemberServiceAssignDayResult) GetSuccess() []*Member {
  return p.Success
}
func (p *MemberServiceAssignDayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceAssignDayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAssignDayResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Member, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &Member{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Success = append(p.Success, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceAssignDayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("assignDay_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAssignDayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceAssignDayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAssignDayResult(%+v)", *p)
}

type MemberServiceGetResultsArgs struct {
}

func NewMemberServiceGetResultsArgs() *MemberServiceGetResultsArgs {
  return &MemberServiceGetResultsArgs{}
}

func (p *MemberServiceGetResultsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetResultsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getResults_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetResultsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetResultsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetResultsResult struct {
  Success []*ResultDay `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetResultsResult() *MemberServiceGetResultsResult {
  return &MemberServiceGetResultsResult{}
}

var MemberServiceGetResultsResult_Success_DEFAULT []*ResultDay

func (p *MemberServiceGetResultsResult) GetSuccess() []*ResultDay {
  return p.Success
}
func (p *MemberServiceGetResultsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetResultsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetResultsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ResultDay, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &ResultDay{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Success = append(p.Success, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceGetResultsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getResults_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetResultsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetResultsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetResultsResult(%+v)", *p)
}

// Attributes:
//  - ID
type MemberServiceGetMemberArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewMemberServiceGetMemberArgs() *MemberServiceGetMemberArgs {
  return &MemberServiceGetMemberArgs{}
}


func (p *MemberServiceGetMemberArgs) GetID() string {
  return p.ID
}
func (p *MemberServiceGetMemberArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *MemberServiceGetMemberArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMember_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MemberServiceGetMemberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetMemberResult struct {
  Success *Member `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetMemberResult() *MemberServiceGetMemberResult {
  return &MemberServiceGetMemberResult{}
}

var MemberServiceGetMemberResult_Success_DEFAULT *Member
func (p *MemberServiceGetMemberResult) GetSuccess() *Member {
  if !p.IsSetSuccess() {
    return MemberServiceGetMemberResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetMemberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetMemberResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Member{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetMemberResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMember_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetMemberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberResult(%+v)", *p)
}

// Attributes:
//  - Day
type MemberServiceGetResultByDayArgs struct {
  Day string `thrift:"day,1" db:"day" json:"day"`
}

func NewMemberServiceGetResultByDayArgs() *MemberServiceGetResultByDayArgs {
  return &MemberServiceGetResultByDayArgs{}
}


func (p *MemberServiceGetResultByDayArgs) GetDay() string {
  return p.Day
}
func (p *MemberServiceGetResultByDayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetResultByDayArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Day = v
}
  return nil
}

func (p *MemberServiceGetResultByDayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getResultByDay_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetResultByDayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:day: ", p), err) }
  if err := oprot.WriteString(string(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:day: ", p), err) }
  return err
}

func (p *MemberServiceGetResultByDayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetResultByDayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetResultByDayResult struct {
  Success *ResultDay `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetResultByDayResult() *MemberServiceGetResultByDayResult {
  return &MemberServiceGetResultByDayResult{}
}

var MemberServiceGetResultByDayResult_Success_DEFAULT *ResultDay
func (p *MemberServiceGetResultByDayResult) GetSuccess() *ResultDay {
  if !p.IsSetSuccess() {
    return MemberServiceGetResultByDayResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetResultByDayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetResultByDayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetResultByDayResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ResultDay{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetResultByDayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getResultByDay_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetResultByDayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetResultByDayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetResultByDayResult(%+v)", *p)
}

type MemberServiceGetNotAssignArgs struct {
}

func NewMemberServiceGetNotAssignArgs() *MemberServiceGetNotAssignArgs {
  return &MemberServiceGetNotAssignArgs{}
}

func (p *MemberServiceGetNotAssignArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetNotAssignArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNotAssign_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetNotAssignArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetNotAssignArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetNotAssignResult struct {
  Success []*Member `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetNotAssignResult() *MemberServiceGetNotAssignResult {
  return &MemberServiceGetNotAssignResult{}
}

var MemberServiceGetNotAssignResult_Success_DEFAULT []*Member

func (p *MemberServiceGetNotAssignResult) GetSuccess() []*Member {
  return p.Success
}
func (p *MemberServiceGetNotAssignResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetNotAssignResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetNotAssignResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Member, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &Member{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Success = append(p.Success, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MemberServiceGetNotAssignResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNotAssign_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetNotAssignResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetNotAssignResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetNotAssignResult(%+v)", *p)
}

// Attributes:
//  - Member
type MemberServiceAddMemberArgs struct {
  Member *Member `thrift:"member,1" db:"member" json:"member"`
}

func NewMemberServiceAddMemberArgs() *MemberServiceAddMemberArgs {
  return &MemberServiceAddMemberArgs{}
}

var MemberServiceAddMemberArgs_Member_DEFAULT *Member
func (p *MemberServiceAddMemberArgs) GetMember() *Member {
  if !p.IsSetMember() {
    return MemberServiceAddMemberArgs_Member_DEFAULT
  }
return p.Member
}
func (p *MemberServiceAddMemberArgs) IsSetMember() bool {
  return p.Member != nil
}

func (p *MemberServiceAddMemberArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAddMemberArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Member = &Member{}
  if err := p.Member.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Member), err)
  }
  return nil
}

func (p *MemberServiceAddMemberArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addMember_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAddMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("member", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:member: ", p), err) }
  if err := p.Member.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Member), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:member: ", p), err) }
  return err
}

func (p *MemberServiceAddMemberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAddMemberArgs(%+v)", *p)
}

type MemberServiceAddMemberResult struct {
}

func NewMemberServiceAddMemberResult() *MemberServiceAddMemberResult {
  return &MemberServiceAddMemberResult{}
}

func (p *MemberServiceAddMemberResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceAddMemberResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addMember_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceAddMemberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceAddMemberResult(%+v)", *p)
}

// Attributes:
//  - LineID
type MemberServiceGetMemberByLineIDArgs struct {
  LineID string `thrift:"line_id,1" db:"line_id" json:"line_id"`
}

func NewMemberServiceGetMemberByLineIDArgs() *MemberServiceGetMemberByLineIDArgs {
  return &MemberServiceGetMemberByLineIDArgs{}
}


func (p *MemberServiceGetMemberByLineIDArgs) GetLineID() string {
  return p.LineID
}
func (p *MemberServiceGetMemberByLineIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberByLineIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LineID = v
}
  return nil
}

func (p *MemberServiceGetMemberByLineIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMemberByLineID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberByLineIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("line_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:line_id: ", p), err) }
  if err := oprot.WriteString(string(p.LineID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.line_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:line_id: ", p), err) }
  return err
}

func (p *MemberServiceGetMemberByLineIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberByLineIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberServiceGetMemberByLineIDResult struct {
  Success *Member `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberServiceGetMemberByLineIDResult() *MemberServiceGetMemberByLineIDResult {
  return &MemberServiceGetMemberByLineIDResult{}
}

var MemberServiceGetMemberByLineIDResult_Success_DEFAULT *Member
func (p *MemberServiceGetMemberByLineIDResult) GetSuccess() *Member {
  if !p.IsSetSuccess() {
    return MemberServiceGetMemberByLineIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *MemberServiceGetMemberByLineIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MemberServiceGetMemberByLineIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberServiceGetMemberByLineIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Member{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MemberServiceGetMemberByLineIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMemberByLineID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberServiceGetMemberByLineIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MemberServiceGetMemberByLineIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberServiceGetMemberByLineIDResult(%+v)", *p)
}


